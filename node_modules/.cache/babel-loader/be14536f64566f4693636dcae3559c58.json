{"ast":null,"code":"var _jsxFileName = \"D:\\\\deploy\\\\covidapp\\\\src\\\\Charts\\\\Charts.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport FetchChartdata from \"../api\";\n\nconst Charts = props => {\n  const [dailyData, setDailyData] = useState([]); // let dailyData = [];\n\n  useEffect(() => {\n    async function GetData() {\n      const res = await axios.get(`https://covid19.mathdro.id/api/daily`);\n      const modifiedData = res.data.map(dailyData => ({\n        confirmed: dailyData.confirmed.total,\n        deaths: dailyData.deaths.total,\n        date: dailyData.reportDate\n      })); // console.log(modifiedData);\n\n      setDailyData(modifiedData);\n    }\n\n    GetData();\n  }, []);\n  const LineChart = dailyData.length != 0 ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: \"Infected\",\n        borderColor: \"#28a745\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"Deaths\",\n        borderColor: \"#dc3545\",\n        backgroundColor: \"#f76869\",\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 34\n    }\n  }) : null; // console.log(props.country);\n\n  const barChart = /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n        data: [props.data.confirmed.value, props.data.recovered.value, props.data.deaths.value]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current state in ${props.country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 27\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, props.data ? props.country ? barChart : LineChart : `...Loading`)));\n};\n\nexport default Charts;","map":{"version":3,"sources":["D:/deploy/covidapp/src/Charts/Charts.jsx"],"names":["React","useState","useEffect","axios","Line","Bar","FetchChartdata","Charts","props","dailyData","setDailyData","GetData","res","get","modifiedData","data","map","confirmed","total","deaths","date","reportDate","LineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","value","recovered","legend","display","title","text","country","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {Line,Bar} from \"react-chartjs-2\";\r\nimport FetchChartdata from \"../api\";\r\n\r\n\r\nconst Charts = (props) =>{\r\n\r\n    \r\n   \r\n    \r\nconst [dailyData,setDailyData]=useState([]);\r\n\r\n// let dailyData = [];\r\n\r\nuseEffect(()=>{\r\n    async function GetData(){\r\n        const res = await axios.get(`https://covid19.mathdro.id/api/daily`);\r\n        \r\n        const modifiedData = res.data.map((dailyData)=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate,\r\n        }));\r\n        // console.log(modifiedData);\r\n        setDailyData(modifiedData);\r\n    \r\n    }\r\n\r\n  GetData();\r\n    \r\n},[]);\r\n\r\n    const LineChart=(\r\n\r\n        dailyData.length !=0 ? ( <Line\r\n                                data={{\r\n                                    labels:dailyData.map(({date})=>date),\r\n                                    datasets:[{\r\n                                        data:dailyData.map(({confirmed})=>confirmed),\r\n                                        label:\"Infected\",\r\n                                        borderColor:\"#28a745\",\r\n                                        fill:true,\r\n                                    } , {\r\n                                        data:dailyData.map(({deaths})=>deaths),\r\n                                        label:\"Deaths\",\r\n                                        borderColor:\"#dc3545\",\r\n                                        backgroundColor:\"#f76869\",\r\n                                        fill:true,\r\n                                    } ],\r\n                                }}\r\n                                />  ): null\r\n                    );\r\n\r\n\r\n                    \r\n                    // console.log(props.country);\r\n                    const barChart = (\r\n                        (\r\n                          <Bar\r\n                            data={{\r\n                              labels: ['Infected', 'Recovered', 'Deaths'],\r\n                              datasets: [\r\n                                {\r\n                                  label: 'People',\r\n                                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                                  data: [props.data.confirmed.value, props.data.recovered.value, props.data.deaths.value],\r\n                                },\r\n                              ],\r\n                            }}\r\n                            options={{\r\n                              legend: { display: false },\r\n                              title: { display: true, text: `Current state in ${props.country}` },\r\n                            }}\r\n                          />\r\n                        ) \r\n                      );\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n        <div className=\"container\" style={{display:\"flex\",justifyContent:\"center\"}}>\r\n            <div className=\"chart\">\r\n            {/* {LineChart} */}\r\n            {  props.data ? ( props.country ? barChart : LineChart):`...Loading`}\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Charts;"]},"metadata":{},"sourceType":"module"}